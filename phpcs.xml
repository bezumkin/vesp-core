<?xml version="1.0"?>
<ruleset name="Vesp">
    <description>Сoding standard.</description>

    <arg name="colors"/>
    <arg name="extensions" value="php" />
    <arg name="basepath" value="." />
    <arg name="parallel" value="75" />
    <arg name="tab-width" value="4"/>

    <file>src/</file>
    <file>tests/</file>

    <config name="installed_paths" value="vendor/phpcompatibility/php-compatibility,vendor/slevomat/coding-standard" />

    <rule ref="PHPCompatibility"/>
    <config name="testVersion" value="7.2-"/>

    <rule ref="PSR12" />

    <!-- Запрещаем использовать ряд функций !-->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property phpcs-only="true" name="forbiddenFunctions" type="array"
                      value="print=>echo,create_function=>null,eval=>null,exec=>null,system=>null"/>
        </properties>
    </rule>

    <rule ref="Generic.Files.LineEndings">
        <properties>
            <property name="eolChar" value="\n"/>
        </properties>
    </rule>
    <rule ref="Generic.Files.LineLength">
        <properties>
            <property name="ignoreComments" value="true"/>
            <property name="lineLimit" value="120"/>
            <property name="absoluteLineLimit" value="0"/>
        </properties>
    </rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- Ограничиваем максимальную вложенность при использовании {} в идеале, эта цифра должна быть в пределах 5-8 !-->
    <rule ref="Generic.Metrics.NestingLevel">
        <properties>
            <property phpcs-only="true" name="nestingLevel" value="8"/>
            <property phpcs-only="true" name="absoluteNestingLevel" value="9"/>
        </properties>
    </rule>

    <rule ref="Generic.NamingConventions.CamelCapsFunctionName">
        <properties>
            <property phpcs-only="true" name="strict" value="true"/>
        </properties>
    </rule>

    <!-- Если конкатенация избыточна (за исключением переноса на другую строку), то считаем это ошибкой !-->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <properties>
            <property name="allowMultiline" value="true" />
            <property name="error" value="false" />
        </properties>
    </rule>
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1" />
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!--<rule ref="Generic.Formatting.SpaceAfterNot" />-->
    <rule ref="Generic.PHP.DisallowShortOpenTag" />

    <!-- Отключаем GOTO !-->
    <rule ref="Generic.PHP.DiscourageGoto" />

    <!-- Запрещаем подавление ошибок через @ !-->
    <!--<rule ref="Generic.PHP.NoSilencedErrors" />-->

    <!-- Проверяем на наличие пустых условий !-->
    <rule ref="Generic.CodeAnalysis.EmptyStatement" />

    <!-- Короткий синтаксис при объявлении массивов !-->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax" />

    <!-- Проверяем всегда ли условие возвращает true/false !-->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />

    <!-- Если класс объявлен как final, то метод объявлять финальным уже не нужно !-->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />

    <!-- Если метод переопределяется, и внутри него вызывается только родительский метод, то такое нам не нужно !-->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod" />

    <!-- А вдруг у нас кто-то в файле создаст несколько одноименных классов?) !-->
    <rule ref="Generic.Classes.DuplicateClassName" />

    <!-- Запрещаем испльзовать циклы for без условия (это должен быть while) !-->
    <rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />

    <!-- Во вложенных циклах счетчики должны быть с разными именами !-->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer" />

    <!-- Запрещаем использовать оператор присовения в условиях !-->
    <!--<rule ref="Generic.CodeAnalysis.AssignmentInCondition" />-->

    <!-- Запречаем использовать echo как функцию !-->
    <rule ref="Squiz.Strings.EchoedStrings" />

    <!-- После вызова echo, print, return, include, include_once, require, require_once необходим пробел !-->
    <rule ref="Squiz.WhiteSpace.LanguageConstructSpacing" />

    <!-- Между объявленными функциями (методами) необходимо наличие пустой строки !-->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing" >
        <properties>
            <property name="spacing" value="1" />
            <property name="spacingAfterLast" value="0" />
            <property name="spacingBeforeFirst" value="0" />
        </properties>
    </rule>

    <!-- Перед точкой с запятой в конце строки не должно быть пробела !-->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing" />

    <!-- При обращении к методу объекта не должно быть пробелов между оператором объекта "->", методом и самим объектом !-->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true" />
        </properties>
    </rule>

    <!-- Приводя тип нельзя использовать пробелы между скобками и самим типом. Необходимо писать (int) вместо ( int ) !-->
    <rule ref="Squiz.WhiteSpace.CastSpacing" />

    <!-- Запрещаем использовать двойные кавычки если не используется подстановка переменных внутри при помощи {}  !-->
    <rule ref="Squiz.Strings.DoubleQuoteUsage.NotRequired" />

    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="requiredSpacesAfterOpen" value="0" />
            <property name="requiredSpacesBeforeClose" value="0" />
            <property name="equalsSpacing" value="1" />
        </properties>
    </rule>
    <rule ref="Squiz.ControlStructures.ForLoopDeclaration" />
    <rule ref="Squiz.ControlStructures.ForEachLoopDeclaration" />

    <!-- Запрещаем использовать закрывающий PHP тег ?> в файлах !-->
    <rule ref="Zend.Files.ClosingTag"/>

    <!--
        Если вызов метода переносится на другую строчку, то делать это нужно вместе с "->". Например
        Правильно: (new \stdClass())->help()
            ->c();
        Неправильно: (new \stdClass())->help()->
            c();
    !-->
    <rule ref="PEAR.WhiteSpace.ObjectOperatorIndent" />

    <!--
        Запрещаем использовать дефолтные комментарии PhpStorm в стиле:
        - Created by PhpStorm.
        - Constructor.
    !-->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments" />

    <!-- Пустых комментариев в коде не должно быть !-->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />

    <!-- Проверяем соответствие имени файла и namespace по стандарту psr-4 !-->
    <rule ref="SlevomatCodingStandard.Files.TypeNameMatchesFileName">
        <properties>
            <property name="rootNamespaces" type="array">
                <element key="src" value="Vesp"/>
                <element key="tests" value="Vesp\Tests"/>
            </property>
        </properties>
    </rule>

    <!-- До и после use требуем поставить пустую строчку !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountBeforeFirstUse" value="1" />
            <property name="linesCountBetweenUseTypes" value="0" />
            <property name="linesCountAfterLastUse" value="1" />
        </properties>
    </rule>

    <!-- Требует наличия пустой строки до и после объявления namespace !-->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing">
        <properties>
            <property name="linesCountBeforeNamespace" value="1" />
            <property name="linesCountAfterNamespace" value="1" />
        </properties>
    </rule>

    <!-- Проверяет отступы при объявлении namespace и запрещает использовать скобки {} !-->
    <rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration" />

    <!-- При импорте класса не должно быть начального слеша \ !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />

    <!-- Не более 1 namespace в файле !-->
    <rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />

    <!-- Проверяем отступы между типом параметра и самим именем параметра в методах и функциях !-->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />

    <!-- Проверяем оступы между типом свойства и самим именем свойства в классах !-->
    <rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHintSpacing" />

    <!-- Настраиваем пустые строки между свойствами объектов !-->
    <rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
        <properties>
            <property name="minLinesCountBeforeWithComment" value="1" />
            <property name="maxLinesCountBeforeWithComment" value="1" />
            <property name="minLinesCountBeforeWithoutComment" value="0" />
            <property name="maxLinesCountBeforeWithoutComment" value="1" />
        </properties>
    </rule>

    <!-- Убираем из phpDoc лишние аннотации !-->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array" value="@author,@created,@version,@package,@copyright,@license"/>
        </properties>
    </rule>

    <!-- Запрещает напрямую работать с супрглобальными массивами (появится только после версии slevomat/coding-standard@6.1.5) !-->
    <rule ref="SlevomatCodingStandard.Variables.DisallowSuperGlobalVariable" />

    <!-- Находит пустые try-catch блоки которые по сути тоже самое, что и подавление ошибок через @ !-->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />

    <!-- Требует запятую в многострочных массивах после последнего элемента !-->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />

    <!-- Заставляет использовать короткую запись тернарного оператора при сравнении с null !-->
    <!--<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator" />
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator" />-->

    <!-- Просит использовать тернарный оператор если это возможно !-->
    <!--<rule ref="SlevomatCodingStandard.ControlStructures.RequireTernaryOperator" />-->

    <!-- Проверяет возможно ли использование раннего выхода !-->
    <!--<rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit" />-->

    <!-- Требует использовать жесткое сравнение с учетом типа === или !== вместо мягкого == или != !-->
    <!--<rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators" />-->

    <!-- Разрешает использование инкремента и декремента только в простых констуркциях, чтобы не превращять код в BrainFuck !-->
    <rule ref="SlevomatCodingStandard.Operators.RequireOnlyStandaloneIncrementAndDecrementOperators" />

    <!-- Для перфоманса просит вызывать некоторые методы без распаковки !-->
    <rule ref="SlevomatCodingStandard.PHP.OptimizedFunctionsWithoutUnpacking" />

    <!-- При импорте классов из одного неймспейса просит выполнить рефакторинг !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />

    <!-- Запрещает импортировать классы в namespace и при подмене присваивать им такое же имя как в оригинале !-->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />

    <!-- Поиск неиспользуемых импортированных классов через use !-->
    <!--<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            &lt;!&ndash; Включаем поиск по аннотациям !&ndash;&gt;
            <property name="searchAnnotations" value="true" />
        </properties>
    </rule>-->

    <!-- Запрещает неявное создание массивов !-->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation" />

    <!-- Поиск неиспользуемых переменных закинутых в замыканиче через use !-->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />

    <!-- Константы классов должны объявляться с указанием области видимости !-->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />

    <!-- Если указан типо возвращаеммых данных из метода, то проверяем где стоит двоеточие!-->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />

    <!-- Типы должны быть указаны в нижнем регистре !-->
    <rule ref="Generic.PHP.LowerCaseType" />

    <!-- Вызов функции в условиях цикла необходимо вынести за пределы цикла !-->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall" />

    <!-- Убрать пустую строку после открывающей и до закрывающей скобок в классе !-->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0" />
            <property name="linesCountBeforeClosingBrace" value="0" />
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Functions.StaticClosure" />
</ruleset>
